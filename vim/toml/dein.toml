# 書き方
# [[plugins]]
# repo = 'リポジトリの場所'
# depends = '依存先プラグイン'
# hook_add = 'プラグインの設定とか' # プラグインが読み込まれた際に実行される。
# hook_source = '' # プラグイン実行"前"に実行される処理
# hook_post_update = '処理' # プラグインインスコ時に行ってほしい処理を書いておく。
# on_i = 1 # インサートモード時に有効になる。

# denite.nvim 検索プラグイン
# 他にもファイルの移動とか便利だったりする 正直、使い方を全然理解してない

# denite.nvimのショートカット設定。GitHubのExamples通り
# Define mappings
# 適当なサイトのコピー(https# vim Shellの補完がuniteっぽい&python3が使えない環境でdeniteが使えないのでこれで。://qiita.com/tamago3keran/items/cdfd66b627b3686846d2)
#
[[plugins]]
repo = 'Shougo/denite.nvim' 
hook_add = '''
  nnoremap <F5> :Denite buffer<CR>
  autocmd FileType denite call s:denite_my_settings()
  function! s:denite_my_settings() abort
    nnoremap <silent><buffer><expr> <CR> denite#do_map('do_action')
    nnoremap <silent><buffer><expr> d denite#do_map('do_action', 'delete')
    nnoremap <silent><buffer><expr> p denite#do_map('do_action', 'preview')
    nnoremap <silent><buffer><expr> q denite#do_map('quit')
    nnoremap <silent><buffer><expr> i denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> <Space> denite#do_map('toggle_select').'j'
  endfunction
'''

# 補完プラグインのソース(本体は.vimrc.plugin)
[[plugins]]
repo = 'Shougo/neosnippet.vim'
[[plugins]]
repo = 'zchee/deoplete-clang'
# Python
[[plugins]]
repo = 'zchee/deoplete-jedi'

# VimShell
[[plugins]]
repo = 'Shougo/vimshell.vim'
depends = 'vimprc.vim'
hook_add = '''
  nnoremap <Space>s  :vs<CR>:<C-u>VimShell<CR>
'''

# vim 日本語ヘルプ
[[plugins]]
repo = 'vim-jp/vimdoc-ja'

# vim-quickrun(編集中のファイルを実行) \r で実行入力なしのCファイルとか実行できる。
[[plugins]]
repo = 'thinca/vim-quickrun'
# \r で実行
# quickrunを<C-c>で終わらせられるように設定
hook_add = '''
  nmap <Leader>r <Plug>(quickrun)'
  nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"'
'''

# 行末の半角スペースを可視化
[[plugins]]
repo = 'bronson/vim-trailing-whitespace'
# :FixWhitespace コマンド実行で行末の半角スペースを削除

# インデントとかを共有する
[[plugins]]
repo = 'editorconfig/editorconfig-vim'

# ファイル名を変更する
[[plugins]]
repo = 'vim-scripts/renamer.vim'
# :Renamerで開始 :Renで変更を保存 :close で変更ウィンドウを閉じる

# sudo.vim スーパーーザー権限のない編集？に権限を与える
[[plugins]]
repo = 'vim-scripts/sudo.vim'
# :e sudo:% とかで開いているファイルをsudoで開き直す

# for<Tab>とかで使える補完機能
[[plugins]]
repo = 'vim-scripts/snipMate'

# htmlの編集などなど
[[plugins]]
repo = 'mattn/emmet-vim'
# for<Tab>とかの補完機能

#関数などをまとめて表示。
#ctagsを(brewとかで)インストールしてないと動かないよ。
[[plugins]]
repo = 'majutsushi/tagbar'
# <F8>で実行
hook_add = 'nmap <F8> :TagbarToggle<CR>'

#ヤンク履歴を参照
[[plugins]]
repo = 'vim-scripts/YankRing.vim')
hook_add = '''
  let g:yankring_history_dir = '~/.vim/'
  # ,yで実行
  nmap ,y :YRShow<CR>
'''

# 囲んでいるものに対していろいろ操作を行う
[[plugins]]
repo = 'tpope/vim-surround'
# ds' で 'hello' -> hello
# cs'(で 'hello' -> (hello)
# cit でタグの中身を削除してインサート

# html5のタグに対応した色
[[plugins]]
repo = 'othree/html5.vim'

# コメントの複数行挿入
[[plugins]]
repo = 'tyru/caw.vim'
# \cで行の先頭にコメントをつけたり外したりできる
hook_add = '''
  nmap <Leader>c <Plug>(caw:i:toggle)
  vmap <Leader>c <Plug>(caw:i:toggle)
'''

# コメントON/OFFを手軽に実行
[[plugins]]
repo = 'tomtom/tcomment_vim'
# (Ctrl + -)を2回

# ディレクトリのTree表示
[[plugins]]
repo = 'scrooloose/nerdtree'
# ファイル名が指定されていない際に自動で起動
# autocmd vimenter * execute 'NERDTree' " 常時起動
hook_add = '''
  autocmd StdinReadPre * let s:std_in = 1 # ファイル名指定なしの場合起動
  if !argc()
    autocmd vimenter * NERDTree|normal gg3j
  endif
  nnoremap <silent><C-i> :NERDTreeToggle<CR> # <C-i>で起動
'''

# Gitをvim上から操る
# 使い方はこの辺を見る http://qiita.com/tashua314/items/35521f9bada5fe00cca7
[[plugins]]
repo = 'tpope/vim-fugitive'

# dein.vimで管理して更新だけするリポジトリ（NeoBundleFetchとおなじ）
#ctagsをインストールしてないと動かないよ。
[[plugins]]
repo = 'jszakmeister/markdown2ctags'

